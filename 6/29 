{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyMG//jQ6JYHcEGYPwmmrXvm",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kim-nam-keyong/TIL-Test/blob/master/6/29%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "C-lC0diCOmUo",
        "outputId": "3612b325-459a-48f3-be56-8bfcbcc229cf"
      },
      "source": [
        "# for ex5\n",
        "# 1 2 3 4\n",
        "# 5 6 7 8\n",
        "# 9 10 11 12 \n",
        "a = 0 \n",
        "for i in range(3) :\n",
        "  #a+=1 # 이 문장의 수행 횟수 3회 \n",
        "  for j in range(4) :\n",
        "    #a += 1  # 이문장의 수행횟수 12회 \n",
        "    print(a,end = \"\\t\")\n",
        "    a += 1 # 최종 a의 값은? 이 문자의 수행 횟수는? \n",
        "  print()\n",
        "\n",
        "print(a)\n",
        "     "
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0\t1\t2\t3\t\n",
            "4\t5\t6\t7\t\n",
            "8\t9\t10\t11\t\n",
            "12\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "z5vz2ZdRRC3a",
        "outputId": "fd9ab8eb-fde4-4e4e-8cc6-07efeadf0283"
      },
      "source": [
        "# 09 중첩 for 구구단 .py \n",
        "# 구구단 출력 2단부터 9단까지 출력 \n",
        "\n",
        "for dan in range(2,10) :\n",
        "  for n in range(1,10) :\n",
        "    print(\"%d * %d = %2s\" %(dan,n,dan*n),end =\"\\t\")\n",
        "\n",
        "  print()\n",
        "\n"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "2 * 1 =  2\t2 * 2 =  4\t2 * 3 =  6\t2 * 4 =  8\t2 * 5 = 10\t2 * 6 = 12\t2 * 7 = 14\t2 * 8 = 16\t2 * 9 = 18\t\n",
            "3 * 1 =  3\t3 * 2 =  6\t3 * 3 =  9\t3 * 4 = 12\t3 * 5 = 15\t3 * 6 = 18\t3 * 7 = 21\t3 * 8 = 24\t3 * 9 = 27\t\n",
            "4 * 1 =  4\t4 * 2 =  8\t4 * 3 = 12\t4 * 4 = 16\t4 * 5 = 20\t4 * 6 = 24\t4 * 7 = 28\t4 * 8 = 32\t4 * 9 = 36\t\n",
            "5 * 1 =  5\t5 * 2 = 10\t5 * 3 = 15\t5 * 4 = 20\t5 * 5 = 25\t5 * 6 = 30\t5 * 7 = 35\t5 * 8 = 40\t5 * 9 = 45\t\n",
            "6 * 1 =  6\t6 * 2 = 12\t6 * 3 = 18\t6 * 4 = 24\t6 * 5 = 30\t6 * 6 = 36\t6 * 7 = 42\t6 * 8 = 48\t6 * 9 = 54\t\n",
            "7 * 1 =  7\t7 * 2 = 14\t7 * 3 = 21\t7 * 4 = 28\t7 * 5 = 35\t7 * 6 = 42\t7 * 7 = 49\t7 * 8 = 56\t7 * 9 = 63\t\n",
            "8 * 1 =  8\t8 * 2 = 16\t8 * 3 = 24\t8 * 4 = 32\t8 * 5 = 40\t8 * 6 = 48\t8 * 7 = 56\t8 * 8 = 64\t8 * 9 = 72\t\n",
            "9 * 1 =  9\t9 * 2 = 18\t9 * 3 = 27\t9 * 4 = 36\t9 * 5 = 45\t9 * 6 = 54\t9 * 7 = 63\t9 * 8 = 72\t9 * 9 = 81\t\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "swVTbNW3YpRv",
        "outputId": "e1dd0527-4f02-48ad-8395-95f44b400177"
      },
      "source": [
        "# 01 while.py \n",
        "# while 문  : 조건식이 만족하는 동안 반복을 수행 ( 반복의 횟수가 결정되어지지 않았을 떄 주로 사용한다.)\n",
        "\n",
        "# 초기값 - 초기값이 없으면 조건 확인이 불가능 ( 생략가능)\n",
        "# while 조건 : \n",
        "# 문장 1\n",
        "# 문장 n\n",
        "# 증가감 - 증가감이 없으면 반복을 종료 할 수 없다. (생략가능)\n",
        "\n",
        "i = 1 # 초기값 \n",
        "\n",
        "while i<=10 :\n",
        "  print(i, end = ' ') # 조건 \n",
        "  i = i +1 # 증가 반복 탈출\n",
        "\n",
        "print()\n",
        "print(i)\n",
        "\n",
        "# 초기값이 없는 경우 \n",
        "# 증가감이 없는 경우 \n",
        "# test 문자를 무한 출력한다.\n",
        "while 3>1:\n",
        "  print(\"test\",end = ' ')\n",
        "  break"
      ],
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1 2 3 4 5 6 7 8 9 10 \n",
            "11\n",
            "test "
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pHIztOEBadvM",
        "outputId": "85bcdb3e-afbb-4573-88a4-d7bab0245b61"
      },
      "source": [
        "# 02 while_3 의 배수의 합. py \n",
        "\n",
        "# 1부터 100 사이의 모든 3의 배수의 합을 while 문을 이용해서 코드 작성 \n",
        "# 누적변수 \n",
        "sum_v = 0\n",
        "\n",
        "# 초기값 \n",
        "num = 1\n",
        "while num <= 100 :\n",
        "  if num %3 == 0 :\n",
        "    sum_v += num \n",
        "  num = num + 1 #증가 \n",
        "\n",
        "print('1부터 100까지의 모든 3의 배수의 합은 %d 입니다.' %sum_v)\n",
        "\n",
        "# 최정 num의 값은 얼마인가?\n",
        "print('반복 후 num의 값은', num, \"입니다\")"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1부터 100까지의 모든 3의 배수의 합은 1683 입니다.\n",
            "반복 후 num의 값은 101 입니다\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bKY7cMBCb5pG",
        "outputId": "49f15cf9-6f1a-4d88-eaa3-0444d90b1bde"
      },
      "source": [
        "# 03 while_7 을 입력하면 종료 \n",
        "\n",
        "# 사용자로부터 숫자를 입력받아 입력된 숫자가 7이면 종료 문자를 내보내고 프로그램을 종료 \n",
        "# 7이 아니면 다시 입력을 받는다 (while문 이용해서 작성)\n",
        "\n",
        "# 입력 양식 \n",
        "# 처음 입력 시 \n",
        "# 숫자입력 :\n",
        "\n",
        "# 다시 입력 시 \n",
        "# 다시 입력 : \n",
        "\n",
        "#출력 양식 \n",
        "# 7입력 ! 종료 \n",
        "\n",
        "while num !=7 :\n",
        "  num = int(input('다시 입력:'))\n",
        "\n",
        "print(num, \"입력 ! 종료\")"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "7 입력 ! 종료\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H8nl6kYyB_pB",
        "outputId": "8ef9035d-0451-45f3-a780-70e892d24276"
      },
      "source": [
        "for i in range(0,5) :\n",
        "    for j in range(0,5) :\n",
        "        if j == 4 :\n",
        "            print(\"*\")\n",
        "            break\n",
        "        print(\"*\", end= ' ')"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "* * * * *\n",
            "* * * * *\n",
            "* * * * *\n",
            "* * * * *\n",
            "* * * * *\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kimviQuCETY7",
        "outputId": "87312694-51d6-4d11-fa6b-cebdf9c9b728"
      },
      "source": [
        "a = 0 \n",
        "for i in range(5) : \n",
        "  for j in range(5) :\n",
        "    a += 1\n",
        "    print('*')\n",
        "    break\n",
        "    print(a, end=(\"\\t\"))\n",
        "  print()\n",
        "   "
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "*\n",
            "\n",
            "*\n",
            "\n",
            "*\n",
            "\n",
            "*\n",
            "\n",
            "*\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KWrmEM77G_xu",
        "outputId": "44e6e656-e71b-4e8f-c7df-4334ca778e71"
      },
      "source": [
        "i=0\n",
        "sum=0\n",
        "for i in range(0,5):\n",
        "    i=i+1\n",
        "    sum=10000-2000*i\n",
        "    print(\"노래를 %d곡 불렀습니다\"%i)\n",
        "    print(\"잔액이 %d원 남았습니다\"%sum)\n",
        "    if sum == 0 :\n",
        "      print(\"잔액이 없습니다. 종료합니다.\")"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "노래를 1곡 불렀습니다\n",
            "잔액이 8000원 남았습니다\n",
            "노래를 2곡 불렀습니다\n",
            "잔액이 6000원 남았습니다\n",
            "노래를 3곡 불렀습니다\n",
            "잔액이 4000원 남았습니다\n",
            "노래를 4곡 불렀습니다\n",
            "잔액이 2000원 남았습니다\n",
            "노래를 5곡 불렀습니다\n",
            "잔액이 0원 남았습니다\n",
            "잔액이 없습니다. 종료합니다.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eT5Y7MCTQqtZ",
        "outputId": "7c1413da-345a-4810-e142-e6f2d566a028"
      },
      "source": [
        "# for ex6.py\n",
        "# 4행 5열 별 출력\n",
        "for i in range(1,5):\n",
        "  for j in range(1,6):\n",
        "    print('*',end = ' ')\n",
        "  print('')"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "* * * * * \n",
            "* * * * * \n",
            "* * * * * \n",
            "* * * * * \n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "o1T7YlOxRcYB",
        "outputId": "eb559cc3-6849-4295-972c-89311c5e0f45"
      },
      "source": [
        "# 두번째 별 출력\n",
        "# 4행번호 만큼의 별이 각 행에 출력 \n",
        "# 2행 별 2개 출력 \n",
        "# 5\n",
        "for i in range(1,6):\n",
        "  for j in range(0,i):\n",
        "    print('*',end = ' ')\n",
        "  print()"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "* \n",
            "* * \n",
            "* * * \n",
            "* * * * \n",
            "* * * * * \n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "unGpAKQwSgZM",
        "outputId": "f5d26106-deca-42ba-f599-a571df037f25"
      },
      "source": [
        "for i in range(1,6):\n",
        "  for j in range(0,6-i):\n",
        "    print('*',end = ' ')\n",
        "  print()"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "* * * * * \n",
            "* * * * \n",
            "* * * \n",
            "* * \n",
            "* \n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MV-5M15qWzaj",
        "outputId": "6bf74888-139c-4aa2-f01e-98457a36b014"
      },
      "source": [
        "while True : \n",
        "  s = input('숫자(정수)만 입력하세요. 종료를 원하면 X를 입력하세요:')\n",
        "\n",
        "  if s=='x':\n",
        "    print('종료합니다.')\n",
        "    break\n",
        "  \n",
        "  if int(s)%2 ==0 :\n",
        "    continue\n",
        "  print(s + '는 홀수입니다.')"
      ],
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "숫자(정수)만 입력하세요. 종료를 원하면 X를 입력하세요:5\n",
            "5는 홀수입니다.\n",
            "숫자(정수)만 입력하세요. 종료를 원하면 X를 입력하세요:2\n",
            "숫자(정수)만 입력하세요. 종료를 원하면 X를 입력하세요:x\n",
            "종료합니다.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1nngLx8pcgYE",
        "outputId": "ea6d0be5-24d9-4d0c-e340-8b4e0cdc3f4b"
      },
      "source": [
        "# 아래와 같은 데이터가 입력되었을 때 숫자만 추출해서 총 합계를 구하시오\n",
        "str_data = \"{a1:20},{a2:30},{a3:15},\\\n",
        "        {a4:50},{a5:-14},{a6:15},\\\n",
        "        {a7:20},{a8:70},{a9:-100}\"\n",
        "\n",
        "# 데이터를 분리할 구분자를 결정\n",
        "\n",
        "split_str_data = str_data.split(\",\")\n",
        "print(split_str_data) #'{a1:20}'\n",
        "\n",
        "for i in range(0,len(split_str_data)):\n",
        "  print(split_str_data[i].split(':')[1].split('}'[0])) \n",
        "\n",
        "# 숫자만 추출 한 후 누적 합산\n",
        "tot = 0 \n",
        "for i in range(0,len(split_str_data)):\n",
        "  temp = split_str_data[i].split(',')[1].split(':')[1]"
      ],
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "['{a1:20}', '{a2:30}', '{a3:15}', '        {a4:50}', '{a5:-14}', '{a6:15}', '        {a7:20}', '{a8:70}', '{a9:-100}']\n",
            "['20', '']\n",
            "['30', '']\n",
            "['15', '']\n",
            "['50', '']\n",
            "['-14', '']\n",
            "['15', '']\n",
            "['20', '']\n",
            "['70', '']\n",
            "['-100', '']\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eYy1go2MvS26",
        "outputId": "58f81af5-0466-4373-ca0d-7ffbbdcb32c9"
      },
      "source": [
        "sep = '-'\n",
        "names = ['홍길동' , '이몽룡' , '성춘향']\n",
        "print(sep.join(names))  #출력 결과의 데이터 타입? 문자열 str\n",
        "\n",
        "# upper(): 대문자로 / lower(): 소문자로 / capitalize(): 문장의 첫번쨰 문자를 대문자로 title(): 단어의 첫 글자를 대문자로 \n",
        "print(\"==============================================\")\n",
        "string = \"this is MY DOG.\"\n",
        "\n",
        "print(string.upper())\n",
        "print(string.lower())\n",
        "print(string.capitalize())\n",
        "print(string.title())"
      ],
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "홍길동-이몽룡-성춘향\n",
            "==============================================\n",
            "THIS IS MY DOG.\n",
            "this is my dog.\n",
            "This is my dog.\n",
            "This Is My Dog.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gSINLpEgv8cr",
        "outputId": "7b27895c-2dc4-4619-ab91-6c04b26a6251"
      },
      "source": [
        "# 공백제거 \n",
        "# strip():양쪽 공백 제거 / lstrip(): 왼쪽 공백제거/ rstrip(): 오른쪽 공백제거 \n",
        "\n",
        "s1 = \"     hello      \"\n",
        "print(\"test\", s1.strip(),\"test\")\n",
        "print(s1.lstrip(),\"test\")\n",
        "print(\"test\",s1.rstrip)"
      ],
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "test hello test\n",
            "hello       test\n",
            "test <built-in method rstrip of str object at 0x7f89837ee8a0>\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NwayF_a7yuai",
        "outputId": "9c761e86-1ee1-4bb6-f538-d7cba5ee86f3"
      },
      "source": [
        "# isalpha(): 문자여부 결과 반환\n",
        "# isdigit(): 숫자여부 결과 반환\n",
        "# isspace(): 하나의 문자에 대해 공백 여부 결과 반환\n",
        "# isalnum(): 문자 또는 숫자 여부 결과 반환\n",
        "# true/ false 로 반환\n",
        "\n",
        "phone = input(\"전화 번호 입력 (숫자만):\")\n",
        "\n",
        "if phone.isdigit():\n",
        "  pass\n",
        "else : \n",
        "  print(\"숫자만 입력하세요\")\n",
        "\n",
        "name = input(\"이름입력:\")\n",
        "if not(name.isalpha()) :\n",
        "  print((\"문자만 입력 하세요\"))"
      ],
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "전화 번호 입력 (숫자만):01028605947\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}